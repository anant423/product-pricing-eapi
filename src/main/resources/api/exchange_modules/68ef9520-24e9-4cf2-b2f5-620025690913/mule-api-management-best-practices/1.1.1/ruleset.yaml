#%Validation Profile 1.0

profile: Mule API Management Best Practices

description: >
  This ruleset contains best practices for managing Mule API instances and instance-related information in specifications. Although there are many rules in this ruleset, they are specific occurrences of broader issues, such as:
  The API instance has no _policy-name_ policy applied
  Example: has-authentication
  All API instances server URLs should be described in the API specification
  Example: documented-api-instances
  _policy-name_ policies should be configured before _policy-name_ policies
  Example: header-injection-before-ip-allowlist

prefixes:
  management: http://anypoint.com/vocabs/management#
  mulesoft: http://anypoint.com/vocabs/management#mulesoft.com/
  api: http://anypoint.com/vocabs/api#

violation:
  - has-authentication
  - has-logging
  - has-rate-limiting
  - has-caching
  # auto-generated rules
  - header-injection-before-ip-allowlist
  - header-injection-before-ip-blocklist
  - header-removal-before-ip-allowlist
  - header-removal-before-ip-blocklist
  - message-logging-before-ip-allowlist
  - message-logging-before-ip-blocklist
  - header-injection-before-rate-limiting
  - header-injection-before-spike-control
  - header-removal-before-rate-limiting
  - header-removal-before-spike-control
  - message-logging-before-rate-limiting
  - message-logging-before-spike-control
  - header-injection-before-cors
  - header-removal-before-cors
  - message-logging-before-cors
  - header-injection-before-ldap-authentication
  - header-injection-before-http-basic-authentication
  - header-injection-before-client-id-enforcement
  - header-injection-before-external-oauth2-access-token-enforcement
  - header-injection-before-oauth2-token-introspection
  - header-injection-before-openidconnect-access-token-enforcement
  - header-removal-before-ldap-authentication
  - header-removal-before-http-basic-authentication
  - header-removal-before-client-id-enforcement
  - header-removal-before-external-oauth2-access-token-enforcement
  - header-removal-before-oauth2-token-introspection
  - header-removal-before-openidconnect-access-token-enforcement
  - message-logging-before-ldap-authentication
  - message-logging-before-http-basic-authentication
  - message-logging-before-client-id-enforcement
  - message-logging-before-external-oauth2-access-token-enforcement
  - message-logging-before-oauth2-token-introspection
  - message-logging-before-openidconnect-access-token-enforcement
  - header-injection-before-rate-limiting-sla-based
  - header-removal-before-rate-limiting-sla-based
  - message-logging-before-rate-limiting-sla-based
  - header-injection-before-http-caching
  - header-removal-before-http-caching
  - message-logging-before-http-caching
  - header-injection-before-spec-validation
  - header-removal-before-spec-validation
  - message-logging-before-spec-validation
  - ip-allowlist-before-rate-limiting
  - ip-allowlist-before-spike-control
  - ip-blocklist-before-rate-limiting
  - ip-blocklist-before-spike-control
  - ip-allowlist-before-cors
  - ip-blocklist-before-cors
  - ip-allowlist-before-ldap-authentication
  - ip-allowlist-before-http-basic-authentication
  - ip-allowlist-before-client-id-enforcement
  - ip-allowlist-before-external-oauth2-access-token-enforcement
  - ip-allowlist-before-oauth2-token-introspection
  - ip-allowlist-before-openidconnect-access-token-enforcement
  - ip-blocklist-before-ldap-authentication
  - ip-blocklist-before-http-basic-authentication
  - ip-blocklist-before-client-id-enforcement
  - ip-blocklist-before-external-oauth2-access-token-enforcement
  - ip-blocklist-before-oauth2-token-introspection
  - ip-blocklist-before-openidconnect-access-token-enforcement
  - ip-allowlist-before-rate-limiting-sla-based
  - ip-blocklist-before-rate-limiting-sla-based
  - ip-allowlist-before-http-caching
  - ip-blocklist-before-http-caching
  - ip-allowlist-before-spec-validation
  - ip-blocklist-before-spec-validation
  - rate-limiting-before-cors
  - spike-control-before-cors
  - rate-limiting-before-ldap-authentication
  - rate-limiting-before-http-basic-authentication
  - rate-limiting-before-client-id-enforcement
  - rate-limiting-before-external-oauth2-access-token-enforcement
  - rate-limiting-before-oauth2-token-introspection
  - rate-limiting-before-openidconnect-access-token-enforcement
  - spike-control-before-ldap-authentication
  - spike-control-before-http-basic-authentication
  - spike-control-before-client-id-enforcement
  - spike-control-before-external-oauth2-access-token-enforcement
  - spike-control-before-oauth2-token-introspection
  - spike-control-before-openidconnect-access-token-enforcement
  - rate-limiting-before-rate-limiting-sla-based
  - spike-control-before-rate-limiting-sla-based
  - rate-limiting-before-http-caching
  - spike-control-before-http-caching
  - rate-limiting-before-spec-validation
  - spike-control-before-spec-validation
  - cors-before-ldap-authentication
  - cors-before-http-basic-authentication
  - cors-before-client-id-enforcement
  - cors-before-external-oauth2-access-token-enforcement
  - cors-before-oauth2-token-introspection
  - cors-before-openidconnect-access-token-enforcement
  - cors-before-rate-limiting-sla-based
  - cors-before-http-caching
  - cors-before-spec-validation
  - ldap-authentication-before-rate-limiting-sla-based
  - http-basic-authentication-before-rate-limiting-sla-based
  - client-id-enforcement-before-rate-limiting-sla-based
  - external-oauth2-access-token-enforcement-before-rate-limiting-sla-based
  - oauth2-token-introspection-before-rate-limiting-sla-based
  - openidconnect-access-token-enforcement-before-rate-limiting-sla-based
  - ldap-authentication-before-http-caching
  - http-basic-authentication-before-http-caching
  - client-id-enforcement-before-http-caching
  - external-oauth2-access-token-enforcement-before-http-caching
  - oauth2-token-introspection-before-http-caching
  - openidconnect-access-token-enforcement-before-http-caching
  - ldap-authentication-before-spec-validation
  - http-basic-authentication-before-spec-validation
  - client-id-enforcement-before-spec-validation
  - external-oauth2-access-token-enforcement-before-spec-validation
  - oauth2-token-introspection-before-spec-validation
  - openidconnect-access-token-enforcement-before-spec-validation
  - rate-limiting-sla-based-before-http-caching
  - rate-limiting-sla-based-before-spec-validation
  - http-caching-before-spec-validation



warning:
  - documented-api-instances

validations:

  has-authentication:
    aspect:
      - anypoint.instances
    message: The API instance has no authentication policy applied
    targetClass: management.APIInstance
    propertyConstraints:
      management.spec / management.policies :
        atLeast:
          count: 1
          validation:
            propertyConstraints:
              management.metadata:
                nested:
                  propertyConstraints:
                    management.annotations / mulesoft.definition-groupId:
                      in:
                        - 68ef9520-24e9-4cf2-b2f5-620025690913
                    management.annotations / mulesoft.definition-assetId:
                      in:
                        - ldap-authentication
                        - http-basic-authentication
                        - client-id-enforcement
                        - basic-client-id-enforcement
                        - ip-allowlist
                        - ip-blocklist
                        - external-oauth2-access-token-enforcement
                        - oauth2-token-introspection
                        - basic-openidconnect-access-token-enforcement
                        - openidconnect-access-token-enforcement
                        - rate-limiting-sla-based

  has-logging:
    aspect:
      - anypoint.instances
    message: The API instance has no logging policy applied
    targetClass: management.APIInstance
    propertyConstraints:
      management.spec / management.policies:
        atLeast:
          count: 1
          validation:
            propertyConstraints:
              management.metadata:
                nested:
                  propertyConstraints:
                    management.annotations / mulesoft.definition-groupId:
                      in:
                        - 68ef9520-24e9-4cf2-b2f5-620025690913
                    management.annotations / mulesoft.definition-assetId:
                      in:
                        - message-logging

  has-rate-limiting:
    aspect:
      - anypoint.instances
    message: The API instance has no rate-limiting policy applied
    targetClass: management.APIInstance
    propertyConstraints:
      management.spec / management.policies:
        atLeast:
          count: 1
          validation:
            propertyConstraints:
              management.metadata:
                nested:
                  propertyConstraints:
                    management.annotations / mulesoft.definition-groupId:
                      in:
                        - 68ef9520-24e9-4cf2-b2f5-620025690913
                    management.annotations / mulesoft.definition-assetId:
                      in:
                        - rate-limiting
                        - basic-rate-limiting
                        - rate-limiting-sla-based
                        - basic-rate-limiting-sla-based

  has-caching:
    aspect:
      - anypoint.instances
    message: The API instance has no HTTP caching policy applied
    targetClass: management.APIInstance
    propertyConstraints:
      management.spec / management.policies:
        atLeast:
          count: 1
          validation:
            propertyConstraints:
              management.metadata:
                nested:
                  propertyConstraints:
                    management.annotations / mulesoft.definition-groupId:
                      in:
                        - 68ef9520-24e9-4cf2-b2f5-620025690913
                    management.annotations / mulesoft.definition-assetId:
                      in:
                        - http-caching

  documented-api-instances:
    aspect:
      - anypoint.instances
    message: All API Instances server URLs should be described in the API specification
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      apiInstanceAddresses = {addr| addr := apiInstancesSpecs[_]["http://anypoint.com/vocabs/management#address"]}
      
      # let's get the spec servers
      projects = search_subjects with data.predicate as "http://anypoint.com/vocabs/api#instance" with data.object as x
      apiContracts = collect with data.nodes as projects with data.property as "http://anypoint.com/vocabs/api#contract"
      webAPIs = collect with data.nodes as apiContracts with data.property as "http://a.ml/vocabularies/document#encodes"
      servers = collect with data.nodes as webAPIs with data.property as "http://a.ml/vocabularies/apiContract#server"
      serverUrlTemplate = {url| url := servers[_]["http://a.ml/vocabularies/core#urlTemplate"]}
      
      # let's find at least one template matching the API instance address
      matched = [ matches |
        addr := apiInstanceAddresses[_]
        found := { check |
          template := serverUrlTemplate[_]
          escapedTemplate1 := replace(template, "/", "\\/")
          escapedTemplate2 := replace(escapedTemplate1, ".", "\\.")
          regexPattern := regex.replace(escapedTemplate2, "\\{([^}]+)\\}", "[\\w]+")
          check := regex.match(regexPattern, addr)
        }
        matches := found[true]
      ]
      $result := count(matched) > 0

### AUTO-GENERATED FROM HERE
  header-injection-before-ip-allowlist:
    aspect:
      - anypoint.instances
    message: header-injection policies should be configured before ip-allowlist policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-injection"
      AFTER_POLICY = "ip-allowlist"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-injection-before-ip-blocklist:
    aspect:
      - anypoint.instances
    message: header-injection policies should be configured before ip-blocklist policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-injection"
      AFTER_POLICY = "ip-blocklist"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-removal-before-ip-allowlist:
    aspect:
      - anypoint.instances
    message: header-removal policies should be configured before ip-allowlist policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-removal"
      AFTER_POLICY = "ip-allowlist"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-removal-before-ip-blocklist:
    aspect:
      - anypoint.instances
    message: header-removal policies should be configured before ip-blocklist policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-removal"
      AFTER_POLICY = "ip-blocklist"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  message-logging-before-ip-allowlist:
    aspect:
      - anypoint.instances
    message: message-logging policies should be configured before ip-allowlist policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "message-logging"
      AFTER_POLICY = "ip-allowlist"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  message-logging-before-ip-blocklist:
    aspect:
      - anypoint.instances
    message: message-logging policies should be configured before ip-blocklist policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "message-logging"
      AFTER_POLICY = "ip-blocklist"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-injection-before-rate-limiting:
    aspect:
      - anypoint.instances
    message: header-injection policies should be configured before rate-limiting policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-injection"
      AFTER_POLICY = "rate-limiting"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-injection-before-spike-control:
    aspect:
      - anypoint.instances
    message: header-injection policies should be configured before spike-control policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-injection"
      AFTER_POLICY = "spike-control"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-removal-before-rate-limiting:
    aspect:
      - anypoint.instances
    message: header-removal policies should be configured before rate-limiting policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-removal"
      AFTER_POLICY = "rate-limiting"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-removal-before-spike-control:
    aspect:
      - anypoint.instances
    message: header-removal policies should be configured before spike-control policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-removal"
      AFTER_POLICY = "spike-control"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  message-logging-before-rate-limiting:
    aspect:
      - anypoint.instances
    message: message-logging policies should be configured before rate-limiting policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "message-logging"
      AFTER_POLICY = "rate-limiting"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  message-logging-before-spike-control:
    aspect:
      - anypoint.instances
    message: message-logging policies should be configured before spike-control policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "message-logging"
      AFTER_POLICY = "spike-control"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-injection-before-cors:
    aspect:
      - anypoint.instances
    message: header-injection policies should be configured before cors policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-injection"
      AFTER_POLICY = "cors"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-removal-before-cors:
    aspect:
      - anypoint.instances
    message: header-removal policies should be configured before cors policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-removal"
      AFTER_POLICY = "cors"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  message-logging-before-cors:
    aspect:
      - anypoint.instances
    message: message-logging policies should be configured before cors policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "message-logging"
      AFTER_POLICY = "cors"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-injection-before-ldap-authentication:
    aspect:
      - anypoint.instances
    message: header-injection policies should be configured before ldap-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-injection"
      AFTER_POLICY = "ldap-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-injection-before-http-basic-authentication:
    aspect:
      - anypoint.instances
    message: header-injection policies should be configured before http-basic-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-injection"
      AFTER_POLICY = "http-basic-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-injection-before-client-id-enforcement:
    aspect:
      - anypoint.instances
    message: header-injection policies should be configured before client-id-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-injection"
      AFTER_POLICY = "client-id-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-injection-before-external-oauth2-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: header-injection policies should be configured before external-oauth2-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-injection"
      AFTER_POLICY = "external-oauth2-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-injection-before-oauth2-token-introspection:
    aspect:
      - anypoint.instances
    message: header-injection policies should be configured before oauth2-token-introspection policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-injection"
      AFTER_POLICY = "oauth2-token-introspection"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-injection-before-openidconnect-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: header-injection policies should be configured before openidconnect-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-injection"
      AFTER_POLICY = "openidconnect-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-removal-before-ldap-authentication:
    aspect:
      - anypoint.instances
    message: header-removal policies should be configured before ldap-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-removal"
      AFTER_POLICY = "ldap-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-removal-before-http-basic-authentication:
    aspect:
      - anypoint.instances
    message: header-removal policies should be configured before http-basic-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-removal"
      AFTER_POLICY = "http-basic-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-removal-before-client-id-enforcement:
    aspect:
      - anypoint.instances
    message: header-removal policies should be configured before client-id-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-removal"
      AFTER_POLICY = "client-id-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-removal-before-external-oauth2-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: header-removal policies should be configured before external-oauth2-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-removal"
      AFTER_POLICY = "external-oauth2-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-removal-before-oauth2-token-introspection:
    aspect:
      - anypoint.instances
    message: header-removal policies should be configured before oauth2-token-introspection policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-removal"
      AFTER_POLICY = "oauth2-token-introspection"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-removal-before-openidconnect-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: header-removal policies should be configured before openidconnect-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-removal"
      AFTER_POLICY = "openidconnect-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  message-logging-before-ldap-authentication:
    aspect:
      - anypoint.instances
    message: message-logging policies should be configured before ldap-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "message-logging"
      AFTER_POLICY = "ldap-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  message-logging-before-http-basic-authentication:
    aspect:
      - anypoint.instances
    message: message-logging policies should be configured before http-basic-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "message-logging"
      AFTER_POLICY = "http-basic-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  message-logging-before-client-id-enforcement:
    aspect:
      - anypoint.instances
    message: message-logging policies should be configured before client-id-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "message-logging"
      AFTER_POLICY = "client-id-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  message-logging-before-external-oauth2-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: message-logging policies should be configured before external-oauth2-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "message-logging"
      AFTER_POLICY = "external-oauth2-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  message-logging-before-oauth2-token-introspection:
    aspect:
      - anypoint.instances
    message: message-logging policies should be configured before oauth2-token-introspection policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "message-logging"
      AFTER_POLICY = "oauth2-token-introspection"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  message-logging-before-openidconnect-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: message-logging policies should be configured before openidconnect-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "message-logging"
      AFTER_POLICY = "openidconnect-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-injection-before-rate-limiting-sla-based:
    aspect:
      - anypoint.instances
    message: header-injection policies should be configured before rate-limiting-sla-based policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-injection"
      AFTER_POLICY = "rate-limiting-sla-based"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-removal-before-rate-limiting-sla-based:
    aspect:
      - anypoint.instances
    message: header-removal policies should be configured before rate-limiting-sla-based policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-removal"
      AFTER_POLICY = "rate-limiting-sla-based"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  message-logging-before-rate-limiting-sla-based:
    aspect:
      - anypoint.instances
    message: message-logging policies should be configured before rate-limiting-sla-based policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "message-logging"
      AFTER_POLICY = "rate-limiting-sla-based"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-injection-before-http-caching:
    aspect:
      - anypoint.instances
    message: header-injection policies should be configured before http-caching policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-injection"
      AFTER_POLICY = "http-caching"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-removal-before-http-caching:
    aspect:
      - anypoint.instances
    message: header-removal policies should be configured before http-caching policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-removal"
      AFTER_POLICY = "http-caching"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  message-logging-before-http-caching:
    aspect:
      - anypoint.instances
    message: message-logging policies should be configured before http-caching policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "message-logging"
      AFTER_POLICY = "http-caching"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-injection-before-spec-validation:
    aspect:
      - anypoint.instances
    message: header-injection policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-injection"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  header-removal-before-spec-validation:
    aspect:
      - anypoint.instances
    message: header-removal policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "header-removal"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  message-logging-before-spec-validation:
    aspect:
      - anypoint.instances
    message: message-logging policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "message-logging"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-allowlist-before-rate-limiting:
    aspect:
      - anypoint.instances
    message: ip-allowlist policies should be configured before rate-limiting policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-allowlist"
      AFTER_POLICY = "rate-limiting"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-allowlist-before-spike-control:
    aspect:
      - anypoint.instances
    message: ip-allowlist policies should be configured before spike-control policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-allowlist"
      AFTER_POLICY = "spike-control"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-blocklist-before-rate-limiting:
    aspect:
      - anypoint.instances
    message: ip-blocklist policies should be configured before rate-limiting policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-blocklist"
      AFTER_POLICY = "rate-limiting"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-blocklist-before-spike-control:
    aspect:
      - anypoint.instances
    message: ip-blocklist policies should be configured before spike-control policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-blocklist"
      AFTER_POLICY = "spike-control"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-allowlist-before-cors:
    aspect:
      - anypoint.instances
    message: ip-allowlist policies should be configured before cors policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-allowlist"
      AFTER_POLICY = "cors"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-blocklist-before-cors:
    aspect:
      - anypoint.instances
    message: ip-blocklist policies should be configured before cors policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-blocklist"
      AFTER_POLICY = "cors"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-allowlist-before-ldap-authentication:
    aspect:
      - anypoint.instances
    message: ip-allowlist policies should be configured before ldap-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-allowlist"
      AFTER_POLICY = "ldap-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-allowlist-before-http-basic-authentication:
    aspect:
      - anypoint.instances
    message: ip-allowlist policies should be configured before http-basic-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-allowlist"
      AFTER_POLICY = "http-basic-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-allowlist-before-client-id-enforcement:
    aspect:
      - anypoint.instances
    message: ip-allowlist policies should be configured before client-id-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-allowlist"
      AFTER_POLICY = "client-id-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-allowlist-before-external-oauth2-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: ip-allowlist policies should be configured before external-oauth2-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-allowlist"
      AFTER_POLICY = "external-oauth2-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-allowlist-before-oauth2-token-introspection:
    aspect:
      - anypoint.instances
    message: ip-allowlist policies should be configured before oauth2-token-introspection policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-allowlist"
      AFTER_POLICY = "oauth2-token-introspection"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-allowlist-before-openidconnect-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: ip-allowlist policies should be configured before openidconnect-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-allowlist"
      AFTER_POLICY = "openidconnect-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-blocklist-before-ldap-authentication:
    aspect:
      - anypoint.instances
    message: ip-blocklist policies should be configured before ldap-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-blocklist"
      AFTER_POLICY = "ldap-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-blocklist-before-http-basic-authentication:
    aspect:
      - anypoint.instances
    message: ip-blocklist policies should be configured before http-basic-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-blocklist"
      AFTER_POLICY = "http-basic-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-blocklist-before-client-id-enforcement:
    aspect:
      - anypoint.instances
    message: ip-blocklist policies should be configured before client-id-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-blocklist"
      AFTER_POLICY = "client-id-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-blocklist-before-external-oauth2-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: ip-blocklist policies should be configured before external-oauth2-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-blocklist"
      AFTER_POLICY = "external-oauth2-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-blocklist-before-oauth2-token-introspection:
    aspect:
      - anypoint.instances
    message: ip-blocklist policies should be configured before oauth2-token-introspection policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-blocklist"
      AFTER_POLICY = "oauth2-token-introspection"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-blocklist-before-openidconnect-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: ip-blocklist policies should be configured before openidconnect-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-blocklist"
      AFTER_POLICY = "openidconnect-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-allowlist-before-rate-limiting-sla-based:
    aspect:
      - anypoint.instances
    message: ip-allowlist policies should be configured before rate-limiting-sla-based policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-allowlist"
      AFTER_POLICY = "rate-limiting-sla-based"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-blocklist-before-rate-limiting-sla-based:
    aspect:
      - anypoint.instances
    message: ip-blocklist policies should be configured before rate-limiting-sla-based policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-blocklist"
      AFTER_POLICY = "rate-limiting-sla-based"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-allowlist-before-http-caching:
    aspect:
      - anypoint.instances
    message: ip-allowlist policies should be configured before http-caching policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-allowlist"
      AFTER_POLICY = "http-caching"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-blocklist-before-http-caching:
    aspect:
      - anypoint.instances
    message: ip-blocklist policies should be configured before http-caching policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-blocklist"
      AFTER_POLICY = "http-caching"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-allowlist-before-spec-validation:
    aspect:
      - anypoint.instances
    message: ip-allowlist policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-allowlist"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ip-blocklist-before-spec-validation:
    aspect:
      - anypoint.instances
    message: ip-blocklist policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ip-blocklist"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  rate-limiting-before-cors:
    aspect:
      - anypoint.instances
    message: rate-limiting policies should be configured before cors policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "rate-limiting"
      AFTER_POLICY = "cors"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  spike-control-before-cors:
    aspect:
      - anypoint.instances
    message: spike-control policies should be configured before cors policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "spike-control"
      AFTER_POLICY = "cors"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  rate-limiting-before-ldap-authentication:
    aspect:
      - anypoint.instances
    message: rate-limiting policies should be configured before ldap-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "rate-limiting"
      AFTER_POLICY = "ldap-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  rate-limiting-before-http-basic-authentication:
    aspect:
      - anypoint.instances
    message: rate-limiting policies should be configured before http-basic-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "rate-limiting"
      AFTER_POLICY = "http-basic-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  rate-limiting-before-client-id-enforcement:
    aspect:
      - anypoint.instances
    message: rate-limiting policies should be configured before client-id-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "rate-limiting"
      AFTER_POLICY = "client-id-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  rate-limiting-before-external-oauth2-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: rate-limiting policies should be configured before external-oauth2-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "rate-limiting"
      AFTER_POLICY = "external-oauth2-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  rate-limiting-before-oauth2-token-introspection:
    aspect:
      - anypoint.instances
    message: rate-limiting policies should be configured before oauth2-token-introspection policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "rate-limiting"
      AFTER_POLICY = "oauth2-token-introspection"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  rate-limiting-before-openidconnect-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: rate-limiting policies should be configured before openidconnect-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "rate-limiting"
      AFTER_POLICY = "openidconnect-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  spike-control-before-ldap-authentication:
    aspect:
      - anypoint.instances
    message: spike-control policies should be configured before ldap-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "spike-control"
      AFTER_POLICY = "ldap-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  spike-control-before-http-basic-authentication:
    aspect:
      - anypoint.instances
    message: spike-control policies should be configured before http-basic-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "spike-control"
      AFTER_POLICY = "http-basic-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  spike-control-before-client-id-enforcement:
    aspect:
      - anypoint.instances
    message: spike-control policies should be configured before client-id-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "spike-control"
      AFTER_POLICY = "client-id-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  spike-control-before-external-oauth2-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: spike-control policies should be configured before external-oauth2-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "spike-control"
      AFTER_POLICY = "external-oauth2-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  spike-control-before-oauth2-token-introspection:
    aspect:
      - anypoint.instances
    message: spike-control policies should be configured before oauth2-token-introspection policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "spike-control"
      AFTER_POLICY = "oauth2-token-introspection"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  spike-control-before-openidconnect-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: spike-control policies should be configured before openidconnect-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "spike-control"
      AFTER_POLICY = "openidconnect-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  rate-limiting-before-rate-limiting-sla-based:
    aspect:
      - anypoint.instances
    message: rate-limiting policies should be configured before rate-limiting-sla-based policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "rate-limiting"
      AFTER_POLICY = "rate-limiting-sla-based"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  spike-control-before-rate-limiting-sla-based:
    aspect:
      - anypoint.instances
    message: spike-control policies should be configured before rate-limiting-sla-based policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "spike-control"
      AFTER_POLICY = "rate-limiting-sla-based"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  rate-limiting-before-http-caching:
    aspect:
      - anypoint.instances
    message: rate-limiting policies should be configured before http-caching policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "rate-limiting"
      AFTER_POLICY = "http-caching"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  spike-control-before-http-caching:
    aspect:
      - anypoint.instances
    message: spike-control policies should be configured before http-caching policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "spike-control"
      AFTER_POLICY = "http-caching"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  rate-limiting-before-spec-validation:
    aspect:
      - anypoint.instances
    message: rate-limiting policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "rate-limiting"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  spike-control-before-spec-validation:
    aspect:
      - anypoint.instances
    message: spike-control policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "spike-control"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  cors-before-ldap-authentication:
    aspect:
      - anypoint.instances
    message: cors policies should be configured before ldap-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "cors"
      AFTER_POLICY = "ldap-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  cors-before-http-basic-authentication:
    aspect:
      - anypoint.instances
    message: cors policies should be configured before http-basic-authentication policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "cors"
      AFTER_POLICY = "http-basic-authentication"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  cors-before-client-id-enforcement:
    aspect:
      - anypoint.instances
    message: cors policies should be configured before client-id-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "cors"
      AFTER_POLICY = "client-id-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  cors-before-external-oauth2-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: cors policies should be configured before external-oauth2-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "cors"
      AFTER_POLICY = "external-oauth2-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  cors-before-oauth2-token-introspection:
    aspect:
      - anypoint.instances
    message: cors policies should be configured before oauth2-token-introspection policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "cors"
      AFTER_POLICY = "oauth2-token-introspection"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  cors-before-openidconnect-access-token-enforcement:
    aspect:
      - anypoint.instances
    message: cors policies should be configured before openidconnect-access-token-enforcement policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "cors"
      AFTER_POLICY = "openidconnect-access-token-enforcement"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  cors-before-rate-limiting-sla-based:
    aspect:
      - anypoint.instances
    message: cors policies should be configured before rate-limiting-sla-based policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "cors"
      AFTER_POLICY = "rate-limiting-sla-based"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  cors-before-http-caching:
    aspect:
      - anypoint.instances
    message: cors policies should be configured before http-caching policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "cors"
      AFTER_POLICY = "http-caching"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  cors-before-spec-validation:
    aspect:
      - anypoint.instances
    message: cors policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "cors"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ldap-authentication-before-rate-limiting-sla-based:
    aspect:
      - anypoint.instances
    message: ldap-authentication policies should be configured before rate-limiting-sla-based policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ldap-authentication"
      AFTER_POLICY = "rate-limiting-sla-based"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  http-basic-authentication-before-rate-limiting-sla-based:
    aspect:
      - anypoint.instances
    message: http-basic-authentication policies should be configured before rate-limiting-sla-based policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "http-basic-authentication"
      AFTER_POLICY = "rate-limiting-sla-based"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  client-id-enforcement-before-rate-limiting-sla-based:
    aspect:
      - anypoint.instances
    message: client-id-enforcement policies should be configured before rate-limiting-sla-based policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "client-id-enforcement"
      AFTER_POLICY = "rate-limiting-sla-based"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  external-oauth2-access-token-enforcement-before-rate-limiting-sla-based:
    aspect:
      - anypoint.instances
    message: external-oauth2-access-token-enforcement policies should be configured before rate-limiting-sla-based policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "external-oauth2-access-token-enforcement"
      AFTER_POLICY = "rate-limiting-sla-based"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  oauth2-token-introspection-before-rate-limiting-sla-based:
    aspect:
      - anypoint.instances
    message: oauth2-token-introspection policies should be configured before rate-limiting-sla-based policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "oauth2-token-introspection"
      AFTER_POLICY = "rate-limiting-sla-based"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  openidconnect-access-token-enforcement-before-rate-limiting-sla-based:
    aspect:
      - anypoint.instances
    message: openidconnect-access-token-enforcement policies should be configured before rate-limiting-sla-based policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "openidconnect-access-token-enforcement"
      AFTER_POLICY = "rate-limiting-sla-based"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ldap-authentication-before-http-caching:
    aspect:
      - anypoint.instances
    message: ldap-authentication policies should be configured before http-caching policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ldap-authentication"
      AFTER_POLICY = "http-caching"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  http-basic-authentication-before-http-caching:
    aspect:
      - anypoint.instances
    message: http-basic-authentication policies should be configured before http-caching policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "http-basic-authentication"
      AFTER_POLICY = "http-caching"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  client-id-enforcement-before-http-caching:
    aspect:
      - anypoint.instances
    message: client-id-enforcement policies should be configured before http-caching policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "client-id-enforcement"
      AFTER_POLICY = "http-caching"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  external-oauth2-access-token-enforcement-before-http-caching:
    aspect:
      - anypoint.instances
    message: external-oauth2-access-token-enforcement policies should be configured before http-caching policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "external-oauth2-access-token-enforcement"
      AFTER_POLICY = "http-caching"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  oauth2-token-introspection-before-http-caching:
    aspect:
      - anypoint.instances
    message: oauth2-token-introspection policies should be configured before http-caching policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "oauth2-token-introspection"
      AFTER_POLICY = "http-caching"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  openidconnect-access-token-enforcement-before-http-caching:
    aspect:
      - anypoint.instances
    message: openidconnect-access-token-enforcement policies should be configured before http-caching policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "openidconnect-access-token-enforcement"
      AFTER_POLICY = "http-caching"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  ldap-authentication-before-spec-validation:
    aspect:
      - anypoint.instances
    message: ldap-authentication policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "ldap-authentication"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  http-basic-authentication-before-spec-validation:
    aspect:
      - anypoint.instances
    message: http-basic-authentication policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "http-basic-authentication"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  client-id-enforcement-before-spec-validation:
    aspect:
      - anypoint.instances
    message: client-id-enforcement policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "client-id-enforcement"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  external-oauth2-access-token-enforcement-before-spec-validation:
    aspect:
      - anypoint.instances
    message: external-oauth2-access-token-enforcement policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "external-oauth2-access-token-enforcement"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  oauth2-token-introspection-before-spec-validation:
    aspect:
      - anypoint.instances
    message: oauth2-token-introspection policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "oauth2-token-introspection"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  openidconnect-access-token-enforcement-before-spec-validation:
    aspect:
      - anypoint.instances
    message: openidconnect-access-token-enforcement policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "openidconnect-access-token-enforcement"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  rate-limiting-sla-based-before-http-caching:
    aspect:
      - anypoint.instances
    message: rate-limiting-sla-based policies should be configured before http-caching policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "rate-limiting-sla-based"
      AFTER_POLICY = "http-caching"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  rate-limiting-sla-based-before-spec-validation:
    aspect:
      - anypoint.instances
    message: rate-limiting-sla-based policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "rate-limiting-sla-based"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]


  http-caching-before-spec-validation:
    aspect:
      - anypoint.instances
    message: http-caching policies should be configured before spec-validation policies
    targetClass: management.APIInstance
    rego: |
      # let's get the GCL URLs
      apiInstancesSpecs = collect with data.nodes as [$node] with data.property as "http://anypoint.com/vocabs/management#spec"
      policies = collect with data.nodes as apiInstancesSpecs with data.property as "http://anypoint.com/vocabs/management#policies"

      # PARAMETERS
      MULESOFT_ORG = "68ef9520-24e9-4cf2-b2f5-620025690913"
      BEFORE_POLICY = "http-caching"
      AFTER_POLICY = "spec-validation"

      ordering = [ policy_order |
        policy_binding := policies[_]
        policy_binding_specs := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#spec"
        policy_binding_spec := policy_binding_specs[_]
        policy_binding_spec_order = policy_binding_spec["http://anypoint.com/vocabs/management#order"]
        policy_binding_metadata := collect with data.nodes as [policy_binding] with data.property as "http://anypoint.com/vocabs/management#metadata"
        policy_binding_definition_annotations := collect with data.nodes as policy_binding_metadata with data.property as "http://anypoint.com/vocabs/management#annotations"
        annotations := policy_binding_definition_annotations[_]
        group_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-groupId"]
        asset_id := annotations["http://anypoint.com/vocabs/management#mulesoft.com/definition-assetId"]
        group_id = MULESOFT_ORG
        valid_policy := {asset_id} & {BEFORE_POLICY , AFTER_POLICY}
        count(valid_policy) > 0
        policy_order := [policy_binding_spec_order, asset_id, policy_binding["@id"]]
      ]

      count(ordering) = 2

      before = [ res |
        ord = ordering[_]
        ord[1] == BEFORE_POLICY
        res = ord[0]
      ]

      after = [ res |
        ord = ordering[_]
        ord[1] == AFTER_POLICY
        res = ord[0]
      ]

      $result := before[0] < after[0]
